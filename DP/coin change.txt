Given an integer array coins[ ] of size N representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ]. 
 
Note: Assume that you have an infinite supply of each type of coin. And you can use any coin as many times as you want.




class Solution {
    public long count(int coins[], int N, int sum) {
        // code here.
        long[][] dp = new long[N][sum+1];
        for(long[] a:dp)
        {
            Arrays.fill(a,-1);
        }
          return finds(coins,N-1,sum,dp);
          
    }
    
    
    static long finds(int[] coins,int ind,int sum,long[][] dp)
    {
        if(ind==0)
        {
            if(sum%coins[0]==0)
            {
                return 1;
            }
            return 0;
        }
        long take=0;
        long nottake=0;
        //long take2=0;
        if(dp[ind][sum]!=-1)
        {
            return dp[ind][sum];
        }
        if(coins[ind]<=sum)
        {
            take = finds(coins,ind,sum-coins[ind],dp);
           // take2= finds(coins,ind-1,sum-coins[ind]);
        }
        
        nottake = finds(coins,ind-1,sum,dp);
        
        return dp[ind][sum]=take+nottake;
    }
    